<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://your-docusaurus-site.example.com/mlflow-website/blog</id>
    <title>MLflow Blog</title>
    <updated>2024-03-05T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://your-docusaurus-site.example.com/mlflow-website/blog"/>
    <subtitle>MLflow Blog</subtitle>
    <icon>https://your-docusaurus-site.example.com/mlflow-website/img/mlflow-favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Announcing MLflow Enhancements - Deep Learning with MLflow (Part 1)]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1"/>
        <updated>2024-03-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Highlighting the recent improvements in MLflow for Deep Learning workflows]]></summary>
        <content type="html"><![CDATA[<p>In the quickly evolving world of artificial intelligence, where generative AI has taken center stage, the landscape of machine learning is
evolving at an unprecedented pace. There has been a surge in the use of cutting-edge deep learning (DL) libraries like
<a href="https://huggingface.co/docs/transformers/index" target="_blank" rel="noopener noreferrer">Transformers</a>, <a href="https://www.tensorflow.org/" target="_blank" rel="noopener noreferrer">Tensorflow</a>,
and <a href="https://pytorch.org/" target="_blank" rel="noopener noreferrer">PyTorch</a> to fine-tune these generative AI models for enhanced performance.
As this trend accelerates, it's become clear that the tools used to build these models must rapidly evolve as well, particularly when it comes
to managing and optimizing these deep learning workloads. MLflow offers a practical solution for managing the complexities of these machine learning projects.</p>
<p>In collaboration with <a href="https://www.mosaicml.com/" target="_blank" rel="noopener noreferrer">MosaicML</a> and the broader ML community, MLflow is thrilled to unveil a set of eagerly awaited enhancements.
This latest release (<a href="https://www.mlflow.org/releases/2.11.0" target="_blank" rel="noopener noreferrer">MLflow 2.11</a>) introduces updated tracking UI capabilities in direct response to
<a href="https://www.linkedin.com/posts/mlflow-org_qualtrics-survey-qualtrics-experience-management-activity-7128154257924513793-RCDG?utm_source=share&amp;utm_medium=member_desktop" target="_blank" rel="noopener noreferrer">the feedback</a>
and needs of MLflow enthusiasts. These updates are not just incremental; they represent a leap forward in addressing the needs of MLflow users doing Deep Learning.</p>
<p>The evolution of enhanced Deep Learning capabilities is a testament to MLflow's commitment to serving the open-source community, ensuring that its offerings
are not just keeping pace, but setting the pace in the rapidly evolving domain of machine learning.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="deep-learning-api-improvements">Deep Learning API Improvements<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#deep-learning-api-improvements" class="hash-link" aria-label="Direct link to Deep Learning API Improvements" title="Direct link to Deep Learning API Improvements">​</a></h2>
<p>Leveraging valuable insights from our user community, we've implemented critical enhancements to the effective scale of metrics logging and the inclusion of
system-related metric logging within our platform. These improvements encompass expanded scalability options, support for logging more iterations and the
logging of system metrics.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="system-metrics">System Metrics<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#system-metrics" class="hash-link" aria-label="Direct link to System Metrics" title="Direct link to System Metrics">​</a></h3>
<p>This feature allows you to <a href="https://mlflow.org/docs/latest/system-metrics/index.html?highlight=system" target="_blank" rel="noopener noreferrer">monitor system metrics</a> and identify any hardware issues that might be impacting performance.
Metrics such as CPU utilization, Memory usage, disk usage etc., from all nodes in your cluster can now be logged and visualized within the MLflow UI.</p>
<p><img loading="lazy" alt="System Metrics" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/system-metrics-b16140bd7099bca6362a3f04a6525a76.png" width="1600" height="823" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="improved-logging-performance">Improved Logging Performance<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#improved-logging-performance" class="hash-link" aria-label="Direct link to Improved Logging Performance" title="Direct link to Improved Logging Performance">​</a></h3>
<p>We recently introduced both asynchronous and batch logging, making it easier to log both
<a href="https://mlflow.org/docs/latest/tracking/tracking-api.html#parallel-runs" target="_blank" rel="noopener noreferrer">parallel and distributed</a> DL training sessions. Additionally, the MLflow Client
now supports up to <strong>1 million</strong> steps (iterations) when logging metrics, allowing users to log more steps during long-running DL jobs.</p>
<p><img loading="lazy" alt="Parallel Runs" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/parallel-runs-d0e00c0275d69ccf3f879086d7f26e6f.png" width="1600" height="546" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="checkpointing-for-deep-learning">Checkpointing for Deep Learning<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#checkpointing-for-deep-learning" class="hash-link" aria-label="Direct link to Checkpointing for Deep Learning" title="Direct link to Checkpointing for Deep Learning">​</a></h3>
<p><a href="https://mlflow.org/releases/2.11.0#autologging-for-tensorflow-and-pytorch-now-supports-checkpointing-of-model-weights:~:text=both%20PyTorch%20and-,TensorFlow,-for%20automatic%20model" target="_blank" rel="noopener noreferrer">TensorFlow</a>
and <a href="https://www.mlflow.org/docs/latest/python_api/mlflow.pytorch.html#mlflow.pytorch.autolog" target="_blank" rel="noopener noreferrer">PyTorch</a> now support model weight checkpointing when
using autologging.</p>
<p><img loading="lazy" alt="DL Checkpointing" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-checkpointing-b1f298b18bd0e09facca8751a5cd599a.png" width="1600" height="981" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="user-experience-and-productivity-enhancements">User Experience and Productivity Enhancements<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#user-experience-and-productivity-enhancements" class="hash-link" aria-label="Direct link to User Experience and Productivity Enhancements" title="Direct link to User Experience and Productivity Enhancements">​</a></h2>
<p>We have introduced substantial improvements to user experience and feature organization within our platform. These enhancements include more
sophisticated user interfaces and an intuitive redesign of the run details page, the addition of chart groups and metric aggregation, all
aimed at simplifying navigation and enhancing productivity especially for Deep Learning use cases.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="metric-aggregation">Metric Aggregation<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#metric-aggregation" class="hash-link" aria-label="Direct link to Metric Aggregation" title="Direct link to Metric Aggregation">​</a></h3>
<p>We've enhanced the UI with metric aggregation, enabling you to aggregate metrics across multiple runs based on
datasets, tags, or parameters. These improvements significantly improve the time it takes to understand training results when working
with large DL models, enabling more nuanced and comprehensive analysis of overarching trends in model performance across multiple dimensions.</p>
<p><img loading="lazy" alt="DL Metric Aggregation" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-metric-aggregation-a160faaae5aa4cee5b270ddc327fbda9.gif" width="960" height="549" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="chart-grouping-functionality">Chart Grouping Functionality<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#chart-grouping-functionality" class="hash-link" aria-label="Direct link to Chart Grouping Functionality" title="Direct link to Chart Grouping Functionality">​</a></h3>
<p>You can now easily categorize and organize your metrics, such as training, testing, and system metrics into
named groups within the MLflow UI. This organization allows for a comprehensive overview of all metrics, enabling quicker access and
better management, particularly when handling experiments with many metrics.</p>
<p><img loading="lazy" alt="DL Chart Grouping" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-chart-grouping-f7f232a7f4048fdddde3338c5ed30902.gif" width="960" height="551" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="slash--logging-syntax">Slash ("/") Logging Syntax<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#slash--logging-syntax" class="hash-link" aria-label="Direct link to Slash (&quot;/&quot;) Logging Syntax" title="Direct link to Slash (&quot;/&quot;) Logging Syntax">​</a></h3>
<p>To further streamline metric organization, we've implemented a new logging syntax that uses slashes
("/") to group metrics. For example, using mlflow.log_metric("x/y/score", 100) helps in structuring and segregating different types
of data or metrics into hierarchical groups, making it easier to navigate and interpret the logs, especially when dealing with complex
models and experiments.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_metric</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'SVR/val_MAPE'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> mean_absolute_percentage_error</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">test_y</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> pred_y</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img loading="lazy" alt="DL Slash Logging" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-slash-logging-21f02b8e210f4dbb614f3025ae8248b4.png" width="1000" height="574" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="chart-searching">Chart Searching<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#chart-searching" class="hash-link" aria-label="Direct link to Chart Searching" title="Direct link to Chart Searching">​</a></h3>
<p>We've significantly enhanced the search functionality within our platform, enabling more robust and intuitive searching
across charts, parameters, and metrics. This upgrade allows for quicker and more precise retrieval of specific data points, streamlining the
process of analyzing and comparing different aspects of your experiments.</p>
<p><img loading="lazy" alt="DL Chart Searching" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-chart-searching-a06459f5a16b9ad28e7571d592cea5bd.gif" width="999" height="472" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="run-details-redesign">Run Details Redesign<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#run-details-redesign" class="hash-link" aria-label="Direct link to Run Details Redesign" title="Direct link to Run Details Redesign">​</a></h3>
<p>We reorganized the Run Details UI to a modular tabbed layout, added new drag and drop UI functionality so that you can
can now render logged tables. This enhancement will make it easier to organize your runs and experiments.</p>
<p><img loading="lazy" alt="DL Run Details Redesign" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-run-details-d776f564ca6e435cdffbf070d5f02b0b.gif" width="1000" height="631" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started-updates">Getting Started Updates<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#getting-started-updates" class="hash-link" aria-label="Direct link to Getting Started Updates" title="Direct link to Getting Started Updates">​</a></h2>
<p>Following extensive feedback from our user community, we've introduced significant updates to enhance the
<a href="https://www.mlflow.org/docs/latest/getting-started/index.html" target="_blank" rel="noopener noreferrer">getting started</a> documentation within MLflow. These updates include a
<a href="https://www.mlflow.org/docs/latest/deep-learning/index.html" target="_blank" rel="noopener noreferrer">comprehensive overhaul</a> of our documentation for easier navigation and
<a href="https://www.mlflow.org/docs/latest/deep-learning/pytorch/quickstart/pytorch_quickstart.html" target="_blank" rel="noopener noreferrer">enriched guidance</a>, along with a streamlined
<a href="https://www.mlflow.org/docs/latest/python_api/mlflow.html#mlflow.login" target="_blank" rel="noopener noreferrer">login API</a>. These enhancements, reflecting our commitment to improving the
user experience and workflow, aim to empower our users to achieve more with greater speed and ease.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-tutorials-and-docs">New Tutorials and Docs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#new-tutorials-and-docs" class="hash-link" aria-label="Direct link to New Tutorials and Docs" title="Direct link to New Tutorials and Docs">​</a></h3>
<p>We've overhauled our documentation to offer a more comprehensive, user-friendly experience with practical examples
to support both newcomers and experienced practitioners with the information they need to start a Deep Learning project.</p>
<p><img loading="lazy" alt="Deep Learning Docs" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-docs-93b181a7480d0a38c003a4ba44012825.png" width="1021" height="558" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="seamless-login-with-mlflowlogin">Seamless login with mlflow.login()<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#seamless-login-with-mlflowlogin" class="hash-link" aria-label="Direct link to Seamless login with mlflow.login()" title="Direct link to Seamless login with mlflow.login()">​</a></h3>
<p>We've streamlined our authentication processes.
<a href="https://mlflow.org/docs/latest/getting-started/tracking-server-overview/index.html#method-2-use-free-hosted-tracking-server-databricks-community-edition" target="_blank" rel="noopener noreferrer">This method</a>
provides a simple way to connect MLflow to your tracking server without having to leave your development environment.
<a href="https://mlflow.org/blog/databricks-ce" target="_blank" rel="noopener noreferrer">Try it out today</a></p>
<p><img loading="lazy" alt="Login Update" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/login-update-578121a523809b9c607c73f811975f41.png" width="1159" height="453" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started-today">Get Started Today<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#get-started-today" class="hash-link" aria-label="Direct link to Get Started Today" title="Direct link to Get Started Today">​</a></h2>
<p>Dive into the latest MLflow updates today and enhance the way you manage your machine learning projects! With our newest enhancements,
including advanced metric aggregation, automatic capturing of system metrics, intuitive feature grouping, and streamlined search capabilities,
MLflow is here to elevate your data science workflow to new heights.
<a href="https://mlflow.org/releases/2.11.0" target="_blank" rel="noopener noreferrer">Get started now with MLflow's cutting-edge tools and features</a>.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">pip install mlflow==2.11</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow ui --port 8080</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_selection </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> train_test_split</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">datasets </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> load_diabetes</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">ensemble </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> RandomForestRegressor</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set our tracking server uri for logging</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_tracking_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"http://127.0.0.1:8080"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">db </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> load_diabetes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> X_test</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_test </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> train_test_split</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">target</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">rf </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> RandomForestRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">n_estimators</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">100</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_depth</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_features</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># MLflow triggers logging automatically upon model fitting</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">rf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="feedback">Feedback<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#feedback" class="hash-link" aria-label="Direct link to Feedback" title="Direct link to Feedback">​</a></h2>
<p>We value your input! Our <a href="https://github.com/orgs/mlflow/projects/4" target="_blank" rel="noopener noreferrer">feature roadmap</a> prioritization is guided by feedback from the <a href="https://www.linkedin.com/feed/update/urn:li:activity:7128154257924513793" target="_blank" rel="noopener noreferrer">MLflow late 2023 survey</a>, <a href="https://github.com/mlflow/mlflow" target="_blank" rel="noopener noreferrer">GitHub Issues</a> and <a href="https://mlflow-users.slack.com/join/shared_invite/zt-1iffrtbly-UNU8hV03aV8feUeGmqf_uA#/shared-invite/email" target="_blank" rel="noopener noreferrer">Slack</a>. Look out for our next survey later this year, by participating you can help ensure that the features you want are implemented in MLflow. You can also create an <a href="https://github.com/mlflow/mlflow" target="_blank" rel="noopener noreferrer">issue on GitHub</a> or join our <a href="https://mlflow-users.slack.com/join/shared_invite/zt-1iffrtbly-UNU8hV03aV8feUeGmqf_uA#/shared-invite/email" target="_blank" rel="noopener noreferrer">Slack</a>.</p>]]></content>
        <author>
            <name>Abe Omorogbe</name>
            <uri>https://www.linkedin.com/in/abeomor/</uri>
        </author>
        <author>
            <name>Hubert Zub</name>
            <uri>https://www.linkedin.com/in/hubert-zub/</uri>
        </author>
        <author>
            <name>Yun Park</name>
            <uri>https://www.linkedin.com/in/yunpark93/</uri>
        </author>
        <author>
            <name>Chen Qian</name>
            <uri>https://www.linkedin.com/in/thomas-chen-qian/</uri>
        </author>
        <author>
            <name>Jesse Chan</name>
        </author>
        <category label="Deep Learning" term="Deep Learning"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023 Year in Review]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review"/>
        <updated>2024-01-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[MLflow year-end recap]]></summary>
        <content type="html"><![CDATA[<p>With more than <strong>16 million</strong> monthly downloads, MLflow has established itself as a leading open-source MLOps platform worldwide.
This achievement underscores the robustness of MLflow and the active community that consistently refines and improves it.</p>
<p>The past year marked a significant milestone for MLflow, particularly in Generative AI. Its integration and support for Large Language Models
(LLMs) stood out. This strategic decision has propelled MLflow to the forefront of the AI revolution, establishing itself as the premier GenAI
platform that enables users to create more intelligent, efficient, and adaptable AI models and applications.</p>
<p><img loading="lazy" alt="16 Million Downloads!" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/download-graph-6003d8547fa38dd5c3253b2a6211d9aa.png" width="1164" height="1241" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2023-a-year-of-genai-and-innovation">2023: A Year of GenAI and Innovation<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#2023-a-year-of-genai-and-innovation" class="hash-link" aria-label="Direct link to 2023: A Year of GenAI and Innovation" title="Direct link to 2023: A Year of GenAI and Innovation">​</a></h2>
<p>Last year was remarkable for MLflow, particularly in integrating LLMs and other generative AI tools. MLflow has evolved significantly by offering
a unified platform and workflow for traditional ML, deep learning, and GenAI applications. This integration ensures unparalleled efficiency and
innovation. MLflow's dedication to improving LLM support has revolutionized how users create and oversee AI workflows, establishing it as an
indispensable tool for building advanced machine learning applications.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integrations-with-leading-ai-tools">Integrations with Leading AI Tools<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#integrations-with-leading-ai-tools" class="hash-link" aria-label="Direct link to Integrations with Leading AI Tools" title="Direct link to Integrations with Leading AI Tools">​</a></h3>
<p>MLflow has successfully incorporated support for popular AI services/frameworks such as <a href="https://huggingface.co/" target="_blank" rel="noopener noreferrer">Hugging Face</a>,
<a href="https://www.langchain.com/" target="_blank" rel="noopener noreferrer">LangChain</a>, and <a href="https://openai.com/" target="_blank" rel="noopener noreferrer">OpenAI</a>, while offering a unified and framework-agnostic interface for
packaging, evaluating, and deploying them. These integrations have opened new horizons for MLflow users, allowing them to leverage the capabilities
of these advanced AI tools seamlessly within their MLflow workflows.</p>
<p><img loading="lazy" alt="GenAI Integrations" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/integrations-5fa17d7f697fd95f91aefa520e6a2432.png" width="1544" height="735" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="model-packaging-for-llms">Model Packaging for LLMs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#model-packaging-for-llms" class="hash-link" aria-label="Direct link to Model Packaging for LLMs" title="Direct link to Model Packaging for LLMs">​</a></h4>
<p>Recognizing the surge in LLM popularity and utility, MLflow has focused on enhancing packaging support for these models. With MLflow’s new built-in
model flavors for <a href="https://www.mlflow.org/docs/latest/llms/transformers/index.html" target="_blank" rel="noopener noreferrer">Hugging Face</a>, <a href="https://www.mlflow.org/docs/latest/llms/langchain/index.html" target="_blank" rel="noopener noreferrer">LangChain</a>
, and <a href="https://www.mlflow.org/docs/latest/llms/openai/index.html" target="_blank" rel="noopener noreferrer">OpenAI</a>, users can log and deploy their LLMs and generative AI applications within minutes.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="retrieval-augmented-generation-rag-and-mlflow-integration">Retrieval Augmented Generation (RAG) and MLflow Integration<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#retrieval-augmented-generation-rag-and-mlflow-integration" class="hash-link" aria-label="Direct link to Retrieval Augmented Generation (RAG) and MLflow Integration" title="Direct link to Retrieval Augmented Generation (RAG) and MLflow Integration">​</a></h4>
<p><a href="https://mlflow.org/docs/latest/llms/rag/index.html" target="_blank" rel="noopener noreferrer">Retrieval Augmented Generation (RAG)</a> represents an impactful method in natural language processing.
It combines pre-trained models with retrieval mechanisms to access a dataset of documents that fetch validated and curated content as opposed to relying
on pure generation. This approach significantly improves generated responses' contextual relevance and factual accuracy. With
<a href="https://www.mlflow.org/docs/latest/llms/llm-evaluate/index.html" target="_blank" rel="noopener noreferrer">mlflow.evaluate()</a>, users can compare RAG systems across prompts, models, vector
databases, and more. See further details in the blog post:
<a href="https://medium.com/@dliden/evaluating-retrieval-augmented-generation-rag-systems-with-mlflow-cf09a74faadb" target="_blank" rel="noopener noreferrer">"Evaluating Retrieval Augmented Generation (RAG) Systems with MLflow"</a>.</p>
<p><img loading="lazy" alt="RAG with MLflow" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/rag-3fd1206bbdf1c5f03b411304a4c683b9.webp" width="1600" height="1276" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="mlflow-deployment-server-in-mlflow-290">MLflow Deployment Server in MLflow 2.9.0<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#mlflow-deployment-server-in-mlflow-290" class="hash-link" aria-label="Direct link to MLflow Deployment Server in MLflow 2.9.0" title="Direct link to MLflow Deployment Server in MLflow 2.9.0">​</a></h4>
<p>The <a href="https://www.mlflow.org/docs/latest/llms/deployments/index.html" target="_blank" rel="noopener noreferrer">MLflow Deployment Server</a> simplifies LLM usage and management from various providers
like OpenAI, MosaicML, Anthropic, Hugging Face, Cohere, MLflow models, and more. Besides supporting popular SaaS LLM providers, the MLflow Deployment Server
integrates with MLflow model serving, enabling users to serve their own LLM or fine-tuned foundation models within their serving infrastructure.
The MLflow Deployment Server also provides a unified inference API across different providers and services, making it much easier to query and compose
them together. It uses securely stored keys from a centralized location, so users no longer need to share sensitive API keys with each member of their
organization. This simplifies how we interact with language models, adding an extra layer of security for managing API keys.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="enhanced-mlflow-evaluate-api-in-mlflow-280">Enhanced MLflow Evaluate API in MLflow 2.8.0<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#enhanced-mlflow-evaluate-api-in-mlflow-280" class="hash-link" aria-label="Direct link to Enhanced MLflow Evaluate API in MLflow 2.8.0" title="Direct link to Enhanced MLflow Evaluate API in MLflow 2.8.0">​</a></h4>
<p>The <a href="https://mlflow.org/docs/latest/llms/llm-evaluate/index.html" target="_blank" rel="noopener noreferrer">MLflow Evaluate API</a> underwent significant feature enhancements to support LLM
workflows better and incorporate multiple new evaluation modes, including support for
<a href="https://mlflow.org/docs/latest/llms/llm-evaluate/index.html#metrics-with-llm-as-the-judge" target="_blank" rel="noopener noreferrer">LLM-as-a-judge</a>. This upgraded API enables a more refined
and thorough analysis of LLM performance.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="prompt-engineering-ui-in-mlflow-270">Prompt Engineering UI in MLflow 2.7.0<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#prompt-engineering-ui-in-mlflow-270" class="hash-link" aria-label="Direct link to Prompt Engineering UI in MLflow 2.7.0" title="Direct link to Prompt Engineering UI in MLflow 2.7.0">​</a></h4>
<p>MLflow introduced the <a href="https://mlflow.org/docs/latest/llms/prompt-engineering/index.html" target="_blank" rel="noopener noreferrer">Prompt Engineering UI</a>, a tool specifically designed for efficient prompt
development, testing, and assessment in Large Language Models (LLMs). This user-friendly interface and comprehensive toolkit have notably improved the
accessibility and efficiency of prompt engineering within LLM workflows.</p>
<p><img loading="lazy" alt="Prompt Engineering UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/prompt-engineering-6863e45e95ed31ec42b84c688187b0d7.png" width="2870" height="1610" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="community-growth-and-engagement">Community Growth and Engagement<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#community-growth-and-engagement" class="hash-link" aria-label="Direct link to Community Growth and Engagement" title="Direct link to Community Growth and Engagement">​</a></h2>
<p>The introduction of the MLflow blog in 2023 was a new addition to the MLflow website. This fresh section signifies a crucial stride toward boosting
community involvement and fostering knowledge exchange within the MLflow ecosystem. The blog serves as a direct avenue for sharing updates about new
features, improvements, and the future trajectory of the MLflow project.</p>
<p>MLflow surpassed 45,000 followers in 2023! Not only this, across <a href="https://twitter.com/MLflow?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor" target="_blank" rel="noopener noreferrer">X</a>
and <a href="https://www.linkedin.com/company/mlflow-org/" target="_blank" rel="noopener noreferrer">LinkedIn</a>, MLflow had over 1 million impressions, the number of times our
content was displayed to users. When it came to MLflow contributor growth, the MLflow contributor count grew from 530 to 690 in 2023.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mlflow-docs-overhaul">MLflow Docs Overhaul<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#mlflow-docs-overhaul" class="hash-link" aria-label="Direct link to MLflow Docs Overhaul" title="Direct link to MLflow Docs Overhaul">​</a></h3>
<p>We have undertaken a massive initiative to reimagine how our users interact with our content. The primary goal is to enhance clarity, improve navigation,
and provide more in-depth resources for our community, in addition to refreshing the look and feel. The overhaul of the MLflow documentation is a significant
milestone, but it’s just the beginning. We have a roadmap full of exciting updates, new content, and features. Whether it’s writing tutorials, sharing use cases,
or providing feedback, every contribution enriches the MLflow community.</p>
<p><img loading="lazy" alt="Docs Overhaul" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/docs-overhaul-c4502c290db228977c36909907249e77.png" width="2210" height="1418" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2023-events">2023 Events<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#2023-events" class="hash-link" aria-label="Direct link to 2023 Events" title="Direct link to 2023 Events">​</a></h3>
<p>MLflow made a substantial impact at two significant events: <strong>NeurIPS 2023</strong> and the <strong>Data+AI Summit 2023</strong>. These events underscored MLflow's commitment
to contributing to the evolving discourse in machine learning and AI, emphasizing its pivotal role in shaping the future of these dynamic fields.
The Data+AI Summit occurred in June 2023 and featured various MLflow-related sessions. Notably, two sessions stood out:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=WpudXKAZQNI" target="_blank" rel="noopener noreferrer">Advancements in Open Source LLM Tooling, Including MLflow</a>: Explored MLflow's seamless integration
with leading generative AI tools like Hugging Face, LangChain, and OpenAI. It highlighted how these integrations enable effortless construction of AI workflows.</li>
<li><a href="https://www.youtube.com/watch?v=MYqXfMqEUq4" target="_blank" rel="noopener noreferrer">How the Texas Rangers Revolutionized Baseball Analytics with a Modern Data Lakehouse</a>: Offered a
comprehensive insight into how the Texas Rangers baseball team leveraged MLflow and Databricks to revolutionize their approach to data analytics.</li>
</ul>
<p><img loading="lazy" alt="Big Data Baseball" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/baseball-f47adc1879b65e6f0e2175f83b78f0c1.png" width="1692" height="906" class="img_ev3q"></p>
<p>In December 2023, MLflow participated in the 37th Annual Conference of Neural Information Processing Systems (NeurIPS) held in New Orleans, LA. NeurIPS
stands as one of the most prestigious conferences in machine learning and computational neuroscience.
For those seeking guidance on fine-tuning a Large Language Model for general-purpose instruction following, the session
<a href="https://arxiv.org/abs/2311.13133" target="_blank" rel="noopener noreferrer">"LIMIT: Less Is More for Instruction Tuning Across Evaluation Paradigms"</a> at NeurIPS presented valuable insights.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="stay-plugged-in">Stay Plugged In<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#stay-plugged-in" class="hash-link" aria-label="Direct link to Stay Plugged In" title="Direct link to Stay Plugged In">​</a></h3>
<p>If you are interested in joining the MLflow community, we’d love to connect! Join us on
<a href="https://mlflow-users.slack.com/ssb/redirect" target="_blank" rel="noopener noreferrer">Slack</a>, <a href="https://groups.google.com/g/mlflow-users" target="_blank" rel="noopener noreferrer">Google Groups</a>, and <a href="https://github.com/mlflow/mlflow/" target="_blank" rel="noopener noreferrer">GitHub</a>.
We have a roadmap full of exciting updates, new content, and features. Whether it’s writing tutorials, developing code, sharing use-cases, or providing feedback, let’s work together!
Are you already an MLflow contributor? The newly launched MLflow Ambassador Program is a great way to boost your involvement. As an MLflow Ambassador,
you will serve as one of our esteemed global ambassadors, pivotal in propelling the adoption and amplifying awareness of MLflow within the global data
community. We invite you to submit an application <a href="https://forms.gle/adAPNvH6aVq4diPF9" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p><img loading="lazy" alt="Ambassador Program" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ambassador-program-f6ebce80bb98bf364c13ed073ef7e796.png" width="1316" height="1294" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="looking-forward">Looking Forward<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#looking-forward" class="hash-link" aria-label="Direct link to Looking Forward" title="Direct link to Looking Forward">​</a></h3>
<p>“In 2024, we're launching new initiatives to engage, support, and expand our community. MLflow is thrilled to broaden its horizons this year through strategic
collaboration and partnership”, says Ben Wilson, Software Engineer at Databricks. “This collaboration will unlock fresh opportunities for our users and
significantly contribute to MLflow's evolution. Stay tuned for an announcement about this exciting effort.”</p>
<p>The year 2023 marked a transformative period for MLflow. By embracing the latest ML and GenAI advancements, MLflow improved its platform and made substantial
contributions to the wider AI and machine learning community. To our MLflow community, we extend our deepest gratitude.</p>
<p>You have been instrumental in driving MLflow's success over the past year. Whether it's enhancing existing features, exploring new integrations, or sharing
your expertise, your contributions are the lifeblood of the MLflow community. If you're interested in contributing to MLflow,
<a href="https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">this guide</a> is an excellent starting point. Looking ahead, we're excited about the myriad
possibilities and new frontiers we can explore together.</p>
<p>MLflow is poised to continue its path of growth and innovation, cementing its role as a leader in managing machine learning and GenAI workflows across the
entire lifecycle. We're eager to keep pushing the boundaries of what's achievable in AI and strive to create an innovative, inclusive, and open future.</p>]]></content>
        <author>
            <name>Carly Akerly</name>
            <uri>https://www.linkedin.com/in/carlyakerly/</uri>
        </author>
        <category label="MLflow" term="MLflow"/>
        <category label="2023" term="2023"/>
        <category label="Linux Foundation" term="Linux Foundation"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Streamline your MLflow Projects with Free Hosted MLflow]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce"/>
        <updated>2024-01-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A guide to using Databricks Community Edition with integrated managed MLflow]]></summary>
        <content type="html"><![CDATA[<p>If you're new to MLflow and want to get started with a fully-managed and completely free deployment of MLflow, this blog will show you how to get started using MLflow in minutes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="streamline-your-ml-projects-get-started-with-hosted-mlflow-for-free">Streamline Your ML Projects: Get Started with Hosted MLflow for Free<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#streamline-your-ml-projects-get-started-with-hosted-mlflow-for-free" class="hash-link" aria-label="Direct link to Streamline Your ML Projects: Get Started with Hosted MLflow for Free" title="Direct link to Streamline Your ML Projects: Get Started with Hosted MLflow for Free">​</a></h2>
<p>Explore the world of big data and machine learning with <a href="https://community.cloud.databricks.com/" target="_blank" rel="noopener noreferrer">Databricks Community Edition (CE)</a>, a free, limited<sup><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fn-1-1ef65d" id="user-content-fnref-1-1ef65d" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup> version of the Databricks platform.
Ideal for beginners and those new to Databricks and MLflow, this edition streamlines the learning curve by offering a managed environment. It eliminates the complexity of manually
setting up a tracking server. Databricks CE includes hosted MLflow, enabling efficient management and visualization of your MLflow experiments. This makes it a prime choice for
developing machine learning projects in a user-friendly interface, allowing you to connect from your favorite IDE, notebook environment, or even from within Databricks CE's notebooks.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="benefits-of-using-databricks-ce-for-mlflow">Benefits of Using Databricks CE for MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#benefits-of-using-databricks-ce-for-mlflow" class="hash-link" aria-label="Direct link to Benefits of Using Databricks CE for MLflow" title="Direct link to Benefits of Using Databricks CE for MLflow">​</a></h3>
<p>MLflow is an open-source framework compatible with any platform, yet it offers distinct benefits when used on Databricks (including the Community Edition, CE) compared to other platforms. These advantages include:</p>
<ol>
<li>
<p><strong>Cost-Effective</strong>: Free of charge, MLflow on Databricks CE is perfect for educational purposes and small-scale projects.</p>
</li>
<li>
<p><strong>Simple Setup</strong>: Gain access to a fully managed tracking server and user interface from any location. To connect to Databricks CE, just execute <code>mlflow.login()</code>.</p>
</li>
<li>
<p><strong>Easy Sharing</strong>: In the Databricks ecosystem, sharing your notebooks is straightforward and hassle-free.</p>
</li>
<li>
<p><strong>Seamless Integration</strong>: Databricks CE allows for direct storage and visualization of MLflow experiments, runs, and models.</p>
</li>
<li>
<p><strong>Scalability</strong>: MLflow on Databricks CE provides an easy path to scale your projects. It also integrates seamlessly with a wide range of data tools available on the Databricks platform.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scenario">Scenario<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#scenario" class="hash-link" aria-label="Direct link to Scenario" title="Direct link to Scenario">​</a></h3>
<p>In this blog, we will walk through running ML experiments on your local device and tracking them on an <a href="https://mlflow.org/docs/latest/tracking.html#common-setups" target="_blank" rel="noopener noreferrer">MLflow tracking server hosted on Databricks CE</a></p>
<p>To give you an idea of the options available for running MLflow, the figure below shows what is possible for common setup configurations.</p>
<p><img loading="lazy" alt="Remote Tracking Server" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/remote-tracking-server-7954737febd0bc4d6d0d209cc78aec6a.png" width="1582" height="1010" class="img_ev3q"></p>
<p>For this blog, we're showing #3, using a remote (fully managed) tracking server.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-by-step-guide">Step-by-Step Guide<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#step-by-step-guide" class="hash-link" aria-label="Direct link to Step-by-Step Guide" title="Direct link to Step-by-Step Guide">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-creating-a-databricks-ce-account">1. Creating a Databricks CE Account<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#1-creating-a-databricks-ce-account" class="hash-link" aria-label="Direct link to 1. Creating a Databricks CE Account" title="Direct link to 1. Creating a Databricks CE Account">​</a></h4>
<p>If you haven't already, you can <a href="https://www.databricks.com/try-databricks#account" target="_blank" rel="noopener noreferrer">sign up for a free account</a>. The process is quick, typically taking no more than 3 minutes.</p>
<p>Fill out the signup form and select “Get started with Community Edition.”</p>
<p><img loading="lazy" alt="Databricks CE Signup Page" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ce-signup-8d3a74af80d917b0ab1d514d2b36d601.png" width="1163" height="552" class="img_ev3q"></p>
<p>Once signed up, you'll get information on how to set a password that you can use to login to CE with<sup><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fn-2-1ef65d" id="user-content-fnref-2-1ef65d" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup>.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-installing-dependencies">2. Installing Dependencies<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#2-installing-dependencies" class="hash-link" aria-label="Direct link to 2. Installing Dependencies" title="Direct link to 2. Installing Dependencies">​</a></h4>
<p>Before you start, ensure that you have the necessary packages installed. Run the following command in your favorite IDE or notebook from your device:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">%pip install -q mlflow databricks-sdk</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-setting-up-databricks-ce-authentication">3. Setting Up Databricks CE Authentication<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#3-setting-up-databricks-ce-authentication" class="hash-link" aria-label="Direct link to 3. Setting Up Databricks CE Authentication" title="Direct link to 3. Setting Up Databricks CE Authentication">​</a></h4>
<p>The main advantage of Databricks Community Edition (CE) is its convenience: it offers an MLflow tracking server without requiring
<a href="https://mlflow.org/docs/latest/getting-started/logging-first-model/step1-tracking-server.html" target="_blank" rel="noopener noreferrer">local infrastructure setup</a>. You can easily access this server through the
<a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.login" target="_blank" rel="noopener noreferrer">mlflow.login()</a> function after creating your CE account, streamlining the process for MLflow experiment tracking.</p>
<p>To authenticate with Databricks CE, use the <a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.login" target="_blank" rel="noopener noreferrer">mlflow.login()</a> function. This will prompt you for:</p>
<ul>
<li>
<p><strong>Databricks Host</strong>: <code>https://community.cloud.databricks.com/</code></p>
</li>
<li>
<p><strong>Username</strong>: Your Databricks CE email address.</p>
</li>
<li>
<p><strong>Password</strong>: Your Databricks CE password.</p>
</li>
</ul>
<p>Upon successful authentication, you will see a confirmation message.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">login</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Follow the prompts for authentication</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-connect-to-hosted-mlflow-and-track-experiments-with-databricks-ce">4. Connect to Hosted MLflow and Track Experiments with Databricks CE<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#4-connect-to-hosted-mlflow-and-track-experiments-with-databricks-ce" class="hash-link" aria-label="Direct link to 4. Connect to Hosted MLflow and Track Experiments with Databricks CE" title="Direct link to 4. Connect to Hosted MLflow and Track Experiments with Databricks CE">​</a></h4>
<p>After you login from your local machine, start an experiment with <a href="https://mlflow.org/docs/latest/python_api/mlflow.html?highlight=mlflow%20set_experiment#mlflow.set_experiment" target="_blank" rel="noopener noreferrer">mlflow.set_experiment()</a> and log some metrics. For instance:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_experiment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"/Users/\&lt;email&gt;/check-databricks-ce-connection"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_metric</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"foo"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_metric</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"bar"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p><strong>Note</strong>: The Databricks environment requires you to set experiments with the directory (from root)</p>
</blockquote>
<p><code>/Users/{your email address for your account}/{name of your experiment}</code>, which is different from the behavior in self-hosted MLflow (and when running MLFlow locally).</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="5-viewing-your-experiment-in-databricks-ce">5. Viewing Your Experiment in Databricks CE<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#5-viewing-your-experiment-in-databricks-ce" class="hash-link" aria-label="Direct link to 5. Viewing Your Experiment in Databricks CE" title="Direct link to 5. Viewing Your Experiment in Databricks CE">​</a></h4>
<p>Now let’s navigate to Databricks CE to view the experiment result. Log in to your <a href="https://community.cloud.databricks.com/" target="_blank" rel="noopener noreferrer">Databricks CE</a>
account, and click on the top left to select machine learning in the drop down list. Finally, click on the experiment icon. See the screenshots below:</p>
<p>Navigate to the Machine Learning Section</p>
<p><img loading="lazy" alt="Navigate to ML Section of Databricks CE" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/navigate-to-experiments-43a3dba9c34a69026e401602f9b5eea7.png" width="1185" height="678" class="img_ev3q"></p>
<p>Navigate to the MLflow UI</p>
<p><img loading="lazy" alt="Navigate to the MLflow UI on Databricks CE" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/navigate-to-mlflow-ui-9153eefcaed934e7b4eb23ee237a47e7.png" width="1288" height="1009" class="img_ev3q"></p>
<p>In the “Experiments” view, you should be able to find the experiment <code>/Users/{your email}/check-databricks-ce-connection</code>, similar to:</p>
<p><img loading="lazy" alt="Experiment view of Databricks MLflow server" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/view-experiment-7dc9705edc70510de92018420a83fbc1.png" width="1600" height="469" class="img_ev3q"></p>
<p>Clicking on the run name, which in this example is 'youthful-lamb-287' (note that you will see a different, randomly generated name in your CE console),
will take you to the run view that looks similar to the following:</p>
<p><img loading="lazy" alt="Run view of Databricks MLflow server" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/view-run-558bde39743ec2b9babdc6f03b81d70f.png" width="1600" height="570" class="img_ev3q"></p>
<p>In the run view, you will see our dummy metrics <code>“foo”</code> and <code>“bar”</code> have been logged successfully.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="6-run-any-mlflow-tutorial-in-databricks-ce">6. Run any MLflow tutorial in Databricks CE<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#6-run-any-mlflow-tutorial-in-databricks-ce" class="hash-link" aria-label="Direct link to 6. Run any MLflow tutorial in Databricks CE" title="Direct link to 6. Run any MLflow tutorial in Databricks CE">​</a></h4>
<p>If you want to try a tutorial from the MLflow website, you can use Databricks CE to quickly test (and modify, if you're inclined) the tutorial. For example, if you wanted to test
the <a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/notebooks/basic-pyfunc.html" target="_blank" rel="noopener noreferrer">Creating Custom Pyfunc tutorial</a>:</p>
<ol>
<li>Click Workspace and&nbsp; select “Import notebook”</li>
</ol>
<p><img loading="lazy" alt="Import a Notebook" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/import-notebook-548588052cf7a796bdb1924c3727a578.png" width="1196" height="674" class="img_ev3q"></p>
<ol start="2">
<li>
<p>Use the <code>URL</code> option to import the notebook directly from the MLflow documentation website. For this example, to import, replace the last element of the url
from <code>html</code> to <code>ipynb</code>. This can be done with any of the tutorial or guide notebooks that are hosted on the MLflow website.</p>
<p>.../notebooks/basic-pyfunc.<del>html</del> → .../notebooks/basic-pyfunc.<strong>ipynb</strong><sup><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fn-3-1ef65d" id="user-content-fnref-3-1ef65d" data-footnote-ref="true" aria-describedby="footnote-label">3</a></sup></p>
</li>
</ol>
<p><img loading="lazy" alt="Select the Notebook for Importing" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/import-notebook-2-589a74ce4c982cb92c494ab404814618.png" width="1519" height="1174" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3>
<p>Databricks Community Edition (CE) offers an accessible and collaborative platform for MLflow experiment tracking, presenting several advantages. Its setup process is effortless
and quick, providing a user-friendly experience. Additionally, it's free to use, making it an ideal choice for beginners, learners, and small-scale projects.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started">Getting started<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#getting-started" class="hash-link" aria-label="Direct link to Getting started" title="Direct link to Getting started">​</a></h3>
<p>Try out the notebook on <a href="https://databricks-prod-cloudfront.cloud.databricks.com/public/4027ec902e239c93eaaa8714f173bcfc/2830662238121329/3266358972198675/8538262732615206/latest.html" target="_blank" rel="noopener noreferrer">Databricks</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="further-reading">Further Reading<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#further-reading" class="hash-link" aria-label="Direct link to Further Reading" title="Direct link to Further Reading">​</a></h3>
<ul>
<li>
<p>Learn more about <a href="https://mlflow.org/docs/latest/getting-started/tracking-server-overview/index.html#minute-tracking-server-overv" target="_blank" rel="noopener noreferrer">different methods to setup your tracking server</a></p>
</li>
<li>
<p>Learn more about running <a href="https://mlflow.org/docs/latest/getting-started/running-notebooks/index.html" target="_blank" rel="noopener noreferrer">Tutorial Notebooks </a>with Databricks CE</p>
</li>
</ul>
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-1ef65d">
<p>The Model Registry and Model Deployment features are not available in the Databricks Community Edition. <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fnref-1-1ef65d" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-2-1ef65d">
<p>Databricks CE only supports basic authorization signin (username / password). For more advanced and secure authorization setups, only the full Databricks product supports those. <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fnref-2-1ef65d" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-3-1ef65d">
<p>Or you can <a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/notebooks/basic-pyfunc.ipynb" target="_blank" rel="noopener noreferrer">download the notebook</a> and manually load it in the UI by selecting <code>File</code> instead of <code>URL</code>. <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fnref-3-1ef65d" data-footnote-backref="" aria-label="Back to reference 3" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content>
        <author>
            <name>Abe Omorogbe</name>
            <uri>https://www.linkedin.com/in/abeomor/</uri>
        </author>
        <category label="managed mlflow" term="managed mlflow"/>
        <category label="getting started" term="getting started"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Custom MLflow Models with mlflow.pyfunc]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc"/>
        <updated>2024-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A guide for creating custom MLflow models]]></summary>
        <content type="html"><![CDATA[<p>If you're looking to learn about all of the flexibility and customization that is possible within
MLflow's custom models, this blog will help you on your journey in understanding more about how to
leverage this powerful and highly customizable model storage format.</p>
<p><img loading="lazy" alt="Welcome" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/header-63bc1d1400bae90d4022e288cb0c513d.png" width="1200" height="629" class="img_ev3q"></p>
<p>MLflow offers built-in methods for logging and working with models from many popular machine
learning and generative AI frameworks and model providers, such as scikit-learn, PyTorch,
HuggingFace transformers, and LangChain. For example,
<a href="https://mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.log_model" target="_blank" rel="noopener noreferrer">mlflow.sklearn.log_model</a>
will log a scikit-learn model as an MLflow artifact without requiring you to define custom methods for
prediction or for handling artifacts.</p>
<p>In some cases, however, you might be working in a framework for which MLflow does not have
built-in methods, or you might want something different than the model’s default prediction
outputs. In those cases, MLflow allows you to create custom models to work with essentially
any framework and to integrate custom logic to existing supported frameworks.</p>
<p>In its simplest form, all that’s required is to define a custom predict method and log the model.
The following example defines a simple pyfunc model that just returns the square of its input:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define a custom model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">MyModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Directly return the square of the input</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> model_input</span><span class="token operator" style="color:rgb(212, 212, 212)">**</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Save the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">MyModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Predict</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let’s dig into how this works, starting with some basic concepts.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="models-and-model-flavors">Models and Model Flavors<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#models-and-model-flavors" class="hash-link" aria-label="Direct link to Models and Model Flavors" title="Direct link to Models and Model Flavors">​</a></h2>
<p><img loading="lazy" alt="Models and Flavors" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/models-and-flavors-51143bf4059c2106bb267bc53daa31bb.png" width="2235" height="1332" class="img_ev3q"></p>
<p>An MLflow model is a directory that includes everything needed to reproduce a machine learning model
across different environments. Aside from the stored model itself, the most important component
stored is an <code>MLmodel</code> YAML file that specifies the model’s supported model flavors.
A <a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/part1-named-flavors.html#components-of-a-model-in-mlflow" target="_blank" rel="noopener noreferrer">model flavor</a>
is a set of rules specifying how MLflow can interact with the model (i.e., save it, load it, and
get predictions from it).</p>
<p>When you create a custom model in MLflow, it has the <code>python_function</code> or pyfunc model flavor,
which is a kind of “universal translator” across formats in MLflow. When you save a model in MLflow
using a built-in model flavor, e.g. with <a href="https://mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.log_model" target="_blank" rel="noopener noreferrer">mlflow.sklearn.log_model</a>,
that model also has the pyfunc model flavor in addition to its framework-specific flavor.
Having both framework-specific and pyfunc model flavors allows you to use the model via the
framework’s native API (e.g., <code>scikit-learn</code>) or via the pyfunc flavor’s framework-agnostic inference API.</p>
<p>Models with the pyfunc flavor are loaded as instances of the <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html?highlight=pyfunc#mlflow.pyfunc.PyFuncModel" target="_blank" rel="noopener noreferrer">mlflow.pyfunc.PyfuncModel</a>
class, which exposes a standardized predict method. This enables straightforward inference through a single
function call, regardless of the underlying model's implementation details.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="defining-custom-mlflow-pyfunc-models">Defining Custom MLflow Pyfunc Models<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#defining-custom-mlflow-pyfunc-models" class="hash-link" aria-label="Direct link to Defining Custom MLflow Pyfunc Models" title="Direct link to Defining Custom MLflow Pyfunc Models">​</a></h2>
<p>Saving a model from any supported machine learning framework as an MLflow model results in the
creation of a pyfunc model flavor that provides a framework-agnostic interface for managing and
using the model. But what if you’re using a framework without an MLflow integration, or you’re
trying to elicit some custom behavior from a model? <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html#creating-custom-pyfunc-models" target="_blank" rel="noopener noreferrer">Custom pyfunc models</a>
allow you to work with essentially any framework and to integrate custom logic.</p>
<p>To implement a custom pyfunc model, define a new Python class inheriting from the PythonModel class
and implement the necessary methods. Minimally, this will involve implementing a custom predict
method. Next, create an instance of your model and log or save the model. Once you’ve loaded the
saved or logged model, you can use it for predictions.</p>
<p><img loading="lazy" alt="Creating a custom model" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/custom-model-creation-d615de1b07178eaeaa25b55443690d17.png" width="2235" height="1383" class="img_ev3q"></p>
<p>Let’s work through a few examples, each adding a little more complexity and highlighting different
aspects of defining a custom pyfunc model. We’ll cover four main techniques for implementing custom
behaviors in pyfunc models:</p>
<ol>
<li>Implementing a custom <code>predict</code> method</li>
<li>Implementing a custom <code>__init__</code> method</li>
<li>Implementing a custom <code>load_context</code> method</li>
<li>Implementing user-defined custom methods</li>
</ol>
<p><img loading="lazy" alt="Pyfunc model customization" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/custom-pyfunc-types-5cd29c2ba155b783ed35f0231432922f.png" width="2239" height="1100" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-a-custom-predict-method">Defining a custom <code>predict</code> method<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#defining-a-custom-predict-method" class="hash-link" aria-label="Direct link to defining-a-custom-predict-method" title="Direct link to defining-a-custom-predict-method">​</a></h3>
<p>At a minimum, a pyfunc model should specify a custom predict method that defines what happens when
we call <code>model.predict</code>. Here’s an example of a custom model that applies a simple linear
transformation to the model inputs, multiplying each input by two and adding three:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Custom PythonModel class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SimpleLinearModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Applies a simple linear transformation</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        to the input data. For example, y = 2x + 3.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Assuming model_input is a pandas DataFrame with one column</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"linear_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">SimpleLinearModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        input_example</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that you can (and should) also include a <a href="https://mlflow.org/docs/latest/models.html#model-signature" target="_blank" rel="noopener noreferrer">signature</a>
and an <a href="https://mlflow.org/docs/latest/models.html#model-input-example" target="_blank" rel="noopener noreferrer">input example</a> when saving/logging a
model. If you pass an input example, the signature will be inferred automatically. The model
signature provides a way for MLflow to enforce correct usage of your model.</p>
<p>Once we’ve defined the model path and saved an instance of the model, we can load the saved model
and use it to generate predictions:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Now the model can be loaded and used for predictions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Example input data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Outputs transformed data</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Which will return:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">:    0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 0  5</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 1  7</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 2  9</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that if a custom <code>predict</code> method is all you need—that is, if your model does not have any
artifacts that require special handling—you can save or log the <code>predict</code> method directly without
needing to wrap it in a Python class:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Applies a simple linear transformation</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    to the input data. For example, y = 2x + 3.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Assuming model_input is a pandas DataFrame with one column</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Pass predict method as python_model argument to save/log model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"simple_function"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        input_example</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that with this approach, we <strong>must include</strong> an input example along with the custom predict
method. We also have to modify the predict method such that it takes only one input (i.e., no self or context).
Running this example and then loading with the same code as the preceding code block will retain the same output as
the example using a class definiton.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="parameterizing-the-custom-model">Parameterizing the custom model<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#parameterizing-the-custom-model" class="hash-link" aria-label="Direct link to Parameterizing the custom model" title="Direct link to Parameterizing the custom model">​</a></h3>
<p>Now suppose we want to parameterize the custom linear function model so that it can be used with
different slopes and intercepts. We can define the <code>__init__</code> method to set up custom parameters,
as in the following example. Note that the custom model class’s <code>__init__</code> method should not be used
to load external resources like data files or pretrained models; these are handled in the
<code>load_context</code> method, which we’ll discuss shortly.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Custom PythonModel class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">ParameterizedLinearModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> slope</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> intercept</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Initialize the parameters of the model. Note that we are not loading</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        any external resources here, just setting up the parameters.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">slope </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> slope</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">intercept </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> intercept</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Applies a simple linear transformation</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        to the input data. For example, y = 2x + 3.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Assuming model_input is a pandas DataFrame with one column</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">slope </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">intercept</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">linear_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ParameterizedLinearModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Saving the model with mlflow</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"parameter_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">linear_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        input_example</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Again, we can load this model and make some predictions:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Example input data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Outputs transformed data</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">:     0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 0  30</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 1  40</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 2  50</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There are many cases where we might want to parameterize a model in this manner. We can define
variables in the <code>__init__</code> method to:</p>
<ul>
<li>Set model hyperparameters.</li>
<li>A/B test models with different parameter sets.</li>
<li>Set user-specific customizations.</li>
<li>Toggle features.</li>
<li>Set, e.g., access credentials and endpoints for models that access external APIs.</li>
</ul>
<p>In some cases, we may want to be able to pass parameters at inference time rather than when we
initialize the model. This can be accomplished with
<a href="https://mlflow.org/docs/latest/models.html#model-inference-params" target="_blank" rel="noopener noreferrer">model inference params</a>. To use
inference params, we must pass a valid model signature including <code>params</code>. Here’s how to adapt the
preceding example to use inference params:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> infer_signature</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Custom PythonModel class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LinearFunctionInferenceParams</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Applies a simple linear transformation</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        to the input data. For example, y = 2x + 3.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        slope </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"slope"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Assuming model_input is a pandas DataFrame with one column</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">slope </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"intercept"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set default params</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">params </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"slope"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"intercept"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define model signature</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">signature </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> infer_signature</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> params</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Save the model with mlflow</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"model_with_params"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">LinearFunctionInferenceParams</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        signature</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">signature</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After loading the model as before, you can now pass a <code>params</code> argument to the <code>predict</code> method,
enabling you to use the same loaded model for different combinations of parameters:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">parameterized_predictions </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> params</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"slope"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"intercept"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">parameterized_predictions</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">:     0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 0  30</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 1  50</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 2  70</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="loading-external-resources-with-load_context">Loading external resources with <code>load_context</code><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#loading-external-resources-with-load_context" class="hash-link" aria-label="Direct link to loading-external-resources-with-load_context" title="Direct link to loading-external-resources-with-load_context">​</a></h3>
<p>Custom models often require external files such as model weights in order to perform inference.
These files, or artifacts, must be handled carefully to avoid unnecessarily loading files into
memory or errors during model serialization. When building custom pyfunc models in MLflow, you can
use the <code>load_context</code> method to handle model artifacts correctly.</p>
<p>The <code>load_context</code> method receives a <code>context</code> object containing artifacts the model can use during
inference. You can specify these artifacts using the <code>artifacts</code> argument when saving or logging
models, making them accessible to the <code>load_context</code> method via the <code>context.artifacts</code> dictionary.</p>
<p>In practice, the <code>load_context</code> method often initializes the model called by the <code>predict</code> method by
handling the loading of model artifacts.</p>
<p>This raises an important question: why do we load artifacts and define the model in the <code>load_context</code>
method and not in <code>__init__</code> or directly in <code>predict</code>? Correct usage of <code>load_context</code> is essential
for the maintainability, efficiency, scalability, and portability of MLflow pyfunc models. This is because:</p>
<ul>
<li>The <code>load_context</code> method is executed once when the model is loaded via <code>mlflow.pyfunc.load_model</code>.
This setup ensures that resource-intensive processes defined within this method, such as loading
large model files, are not repeated unnecessarily. If artifact loading is done in the predict
method, it will occur every single time a prediction is made. This is highly inefficient for
resource-intensive models.</li>
<li>Saving or logging an MLflow <code>pyfunc</code> model involves serializing the Python model class (the subclass
of <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html#mlflow.pyfunc.PythonModel" target="_blank" rel="noopener noreferrer">mlflow.pyfunc.PythonModel</a>
you created) and its attributes. Complex ML models are not always compatible with the methods used
to serialize the Python object, which can lead to errors if they are created as attributes of the Python object.</li>
</ul>
<p>As an example, suppose we want to load a large language model (LLM) in the <code>gguf</code> model format
(a file format designed for storing models for inference) and run it with the
<a href="https://pypi.org/project/ctransformers" target="_blank" rel="noopener noreferrer">ctransformers library</a>. At the time of writing, there is
no built-in model flavor that lets us use <code>gguf</code> models for inference, so we’ll create a custom
pyfunc model that loads the required libraries and model files in the <code>load_context</code> method.
Specifically, we’re going to load a quantized version of the <a href="https://huggingface.co/TheBloke/Mistral-7B-v0.1-AWQ" target="_blank" rel="noopener noreferrer">AWQ version of the Mistral 7B model</a>.</p>
<p>First, we’ll download the model snapshot using the huggingface hub cli:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">huggingface-cli download TheBloke/Mistral-7B-v0.1-GGUF \</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                mistral-7b-v0.1.Q4_K_M.gguf \</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                --local-dir /path/to/mistralfiles/ \</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                --local-dir-use-symlinks False</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And then we’ll define our custom <code>pyfunc</code> model. Note the addition of the <code>load_context</code> method:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ctransformers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">CTransformersModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> gpu_layers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Initialize with GPU layer configuration.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">gpu_layers </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> gpu_layers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Load the model from the specified artifacts directory.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_file_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"model_file"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ctransformers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">AutoModelForCausalLM</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_pretrained</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            model_path_or_repo_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_file_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            gpu_layers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">gpu_layers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Perform prediction using the loaded model.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"The model has not been loaded. "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"Ensure that 'load_context' is properly executed."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There’s a lot going on here, so let’s break it down. Here are the key points:</p>
<ul>
<li>As before, we use the <code>__init__</code> method to parameterize the model (in this case, to set the
<code>gpu_layers</code> argument for the model).</li>
<li>The purpose of the <code>load_context</code> method is to load the artifacts required for use in the
<code>predict</code> method. In this case, we need to load the model and its weights.</li>
<li>You’ll notice that we reference <code>context.artifacts["model_file"]</code>. This comes from the artifacts
argument to <code>mlflow.pyfunc.save_model</code> or <code>mlflow.pyfunc.load_model</code>, as shown in the following
code snippet. This is an important part of working with <code>pyfunc</code> models. The <code>predict</code> and
<code>load_context</code> methods can access the artifacts defined in the artifacts argument to the
<code>save_model</code> or <code>log_model</code> method via the <code>context.artifacts</code> object. <code>load_context</code> is executed
when the model is loaded via <code>load_model</code>; as described earlier, this provides a way to ensure that
the potentially time-consuming initialization of a model does not occur each time the model is used
for prediction.</li>
</ul>
<p>Now we can initialize and save an instance of the model. Note the artifacts argument to the
<code>save_model</code> function:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Create an instance of the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mistral_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> CTransformersModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">gpu_layers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">50</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Log the model using mlflow with the model file as an artifact</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"mistral_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">mistral_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifacts</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"model_file"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> model_file_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        pip_requirements</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"ctransformers==0.2.27"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the saved model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Make a prediction with the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Question: What is the MLflow Pyfunc model flavor?"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To recap: correct use of the <code>load_context</code> method helps to ensure efficient handling of model
artifacts and prevents errors in serialization that could result from attempting to define artifacts
as model attributes.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-custom-methods">Defining custom methods<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#defining-custom-methods" class="hash-link" aria-label="Direct link to Defining custom methods" title="Direct link to Defining custom methods">​</a></h3>
<p>You can define your own methods in the custom <code>pyfunc</code> model to handle tasks like preprocessing
inputs or post-processing outputs. These custom methods can then be called by the predict method.
Keep in mind that these custom methods, just like <code>__init__</code> and <code>predict</code>, should <strong>not be used</strong> for
loading artifacts. Loading artifacts is the exclusive role of the <code>load_context</code> method.</p>
<p>For example, we can modify the <code>CTransformersModel</code> to incorporate some prompt formatting as follows:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ctransformers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">CTransformersModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> gpu_layers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Initialize with GPU layer configuration.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">gpu_layers </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> gpu_layers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Load the model from the specified artifacts directory.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_file_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"model_file"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ctransformers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">AutoModelForCausalLM</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_pretrained</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            model_path_or_repo_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_file_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            gpu_layers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">gpu_layers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@staticmethod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_format_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Formats the user's prompt</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        formatted_prompt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"Question: What is an MLflow Model?\n\n"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"Answer: An MLflow Model is a directory that includes "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"everything that is needed to reproduce a machine "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"learning model across different environments. "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"It is essentially a container holding the trained model "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"files, dependencies, environment details, input examples, "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"and additional metadata. The directory also includes an "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"MLmodel YAML file, which describes the different "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"flavors of the model.\n\nQuestion: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">prompt</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">\nAnswer: "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> formatted_prompt</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Perform prediction using the loaded model.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"Model was not loaded. Ensure that 'load_context' "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"is properly executed."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_format_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now the <code>predict</code> method can access the private <code>_format_prompt</code> static method to apply custom formatting to the prompts.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dependencies-and-source-code">Dependencies and Source Code<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#dependencies-and-source-code" class="hash-link" aria-label="Direct link to Dependencies and Source Code" title="Direct link to Dependencies and Source Code">​</a></h3>
<p>The custom <code>CTransformersModel</code> defined above uses the <code>ctransformers</code> library. There are a few
different approaches for making sure this library (and any other source code, including from your
local device) is correctly loaded with your model. Correctly specifying dependencies is essential
for ensuring that custom models work as expected across environments.</p>
<p>There are three main approaches to be aware of for specifying dependencies:</p>
<ul>
<li>Define pip requirements explicitly with the <code>pip_requirements</code> argument to <code>save_model</code> or <code>log_model</code>.</li>
<li>Add extra pip requirements to an automatically generated set of requirements with the
<code>extra_pip_requirements</code> argument to <code>save_model</code> or <code>log_model</code>.</li>
<li>Define a Conda environment with the <code>conda_env</code> argument to <code>save_model</code> or <code>log_model</code>.</li>
</ul>
<p>Earlier, we used the first approach to specify that the <code>ctransformers</code> library was needed:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Log the model using mlflow with the model file as an artifact</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">save_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"mistralmodel"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">mistral_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifacts</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"model_file"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"path/to/mistral/model/on/local/filesystem"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        pip_requirements</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"ctransformers==0.2.27"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If you do not specify dependencies explicitly, MLflow will attempt to infer the correct set of
requirements and environment details. To enable greater accuracy, it is <strong>strongly recommended</strong> to
include an <code>input_example</code> when saving or logging your model due to the internal execution of a
sample inference step that will capture any loaded library references associated with the inference
execution, enabling a higher probability that the correct dependencies will be recorded.</p>
<p>You can also work with custom code on your own filesystem with the <code>code_path</code> argument.
<code>code_path</code> takes a list of paths to Python file dependencies and prepends them to the system
path before the model is loaded, so the custom pyfunc model can import from these modules.</p>
<p>See the documentation for the <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html?highlight=pyfunc#mlflow.pyfunc.log_model" target="_blank" rel="noopener noreferrer">log_model</a> and
<a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html?highlight=pyfunc#mlflow.pyfunc.save_model" target="_blank" rel="noopener noreferrer">save_model</a>
functions for more details on the accepted formats for <code>pip</code>, <code>Conda</code>, and local code requirements.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary-custom-pyfunc-models-in-mlflow">Summary: Custom Pyfunc Models in MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#summary-custom-pyfunc-models-in-mlflow" class="hash-link" aria-label="Direct link to Summary: Custom Pyfunc Models in MLflow" title="Direct link to Summary: Custom Pyfunc Models in MLflow">​</a></h3>
<p>MLflow has built-in methods for working with models from many popular machine learning frameworks,
such as <a href="https://www.mlflow.org/docs/latest/models.html#scikit-learn-sklearn" target="_blank" rel="noopener noreferrer">scikit-learn</a>,
<a href="https://www.mlflow.org/docs/latest/models.html#pytorch-pytorch" target="_blank" rel="noopener noreferrer">PyTorch</a>, and
<a href="https://www.mlflow.org/docs/latest/llms/transformers/index.html" target="_blank" rel="noopener noreferrer">Transformers</a>. You can define your own custom
<code>mlflow.pyfunc</code> model when you want to work with models that do not yet have built-in model
flavors, or when you want to implement a custom predict method for models with built-in model flavors.</p>
<p>There are several ways to customize <code>pyfunc</code> models to get the desired behavior. Minimally, you can
implement a custom <code>predict</code> method. If your model requires saving or loading artifacts, you should also
implement a <code>load_context</code> method. For further customization, you can use the <code>__init__</code> method for
setting custom attributes and define your own custom methods for pre- and post-processing.
Combining these approaches gives you the ability to flexibly define custom logic for your machine
learning models.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="further-learning">Further Learning<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#further-learning" class="hash-link" aria-label="Direct link to Further Learning" title="Direct link to Further Learning">​</a></h3>
<p>Interested in learning more about custom <code>pyfunc</code> implementations? You can visit:</p>
<ul>
<li><a href="https://www.mlflow.org/docs/latest/llms/custom-pyfunc-for-llms/notebooks/index.html" target="_blank" rel="noopener noreferrer">Custom Pyfuncs for Advanced LLMs with MLflow</a></li>
<li><a href="https://www.mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/index.html" target="_blank" rel="noopener noreferrer">Build Custom Python Function Models for traditional ML</a></li>
<li><a href="https://www.mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/notebooks/index.html" target="_blank" rel="noopener noreferrer">Custom PyFunc notebook examples</a></li>
</ul>]]></content>
        <author>
            <name>Daniel Liden</name>
            <uri>https://www.linkedin.com/in/danielliden</uri>
        </author>
        <category label="pyfunc" term="pyfunc"/>
        <category label="models" term="models"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[MLflow AI Gateway renamed to MLflow Deployments for LLMs]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/ai-gateway-rename</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/ai-gateway-rename"/>
        <updated>2023-12-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[If you are currently using the MLflow AI Gateway, please read this in full to get critically important information about this feature!]]></summary>
        <content type="html"><![CDATA[<p>If you are currently using the MLflow AI Gateway, please read this in full to get critically important information about this feature!</p>
<p>Please note that the feature previously known as the <code>MLflow AI Gateway</code>, which was in an experimental phase, has undergone significant updates and improvements.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-mlflow-deployments-for-llms">Introducing "MLflow Deployments for LLMs"<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/ai-gateway-rename#introducing-mlflow-deployments-for-llms" class="hash-link" aria-label="Direct link to Introducing &quot;MLflow Deployments for LLMs&quot;" title="Direct link to Introducing &quot;MLflow Deployments for LLMs&quot;">​</a></h2>
<p>This feature, while still in experimental status, has been renamed and migrated to utilize the <code>deployments</code> API.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-key-changes">🔑 Key Changes<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/ai-gateway-rename#-key-changes" class="hash-link" aria-label="Direct link to 🔑 Key Changes" title="Direct link to 🔑 Key Changes">​</a></h2>
<p><strong>New Name, Enhanced Features</strong>: The transition from "MLflow AI Gateway" to "MLflow Deployments for LLMs" reflects not only a change in name but also substantial enhancements in usability and <strong>standardization</strong> for API endpoints for Large Language Models.</p>
<p><strong>API Changes</strong>: With this move, there are changes to the API endpoints and configurations. Users are encouraged to review the updated API documentation to familiarize themselves with the new structure.</p>
<p><strong>Migration Path</strong>: For existing projects using "MLflow AI Gateway", a migration guide is available to assist with the transition to "MLflow Deployments for LLMs". This guide provides step-by-step instructions and best practices to ensure a smooth migration.</p>
<p>⚠️ <strong>Action Required</strong>: Users who have been utilizing the experimental "MLflow AI Gateway" should plan to migrate to "MLflow Deployments for LLMs". While we aim to make this transition as seamless as possible, manual changes to your code and deployment configurations will be necessary. This new namespace for deploying the previously-known-as AI Gateway will be released in version 2.9.0. The old AI Gateway references will remain active but will enter a deprecated state. <em>We will be removing the entire AI Gateway namespace in a future release</em>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-resources-and-support">📚 Resources and Support<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/ai-gateway-rename#-resources-and-support" class="hash-link" aria-label="Direct link to 📚 Resources and Support" title="Direct link to 📚 Resources and Support">​</a></h2>
<p><strong>Updated Documentation</strong>: Detailed documentation for "MLflow Deployments for LLMs" is available <a href="https://your-docusaurus-site.example.com/mlflow-website/docs/latest/llms/deployments/index.html" target="_blank" rel="noopener noreferrer">here</a>. It includes comprehensive information about the modifications to API interfaces, updates to the input and output structures for queries and responses, API utilization, and the updated configuration options.</p>
<p><strong>Community and Support</strong>: If you have any questions or need assistance, please reach out to the maintainers <a href="https://github.com/mlflow/mlflow/issues" target="_blank" rel="noopener noreferrer">on GitHub</a>.</p>
<p>We are excited about these advancements and strongly believe that leveraging the deployments API will offer a more robust, efficient, and scalable solution for managing your Large Language Model deployments. Thank you for your continued support and collaboration!</p>]]></content>
        <author>
            <name>MLflow maintainers</name>
            <uri>https://github.com/mlflow/mlflow.git</uri>
        </author>
        <category label="ai" term="ai"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Automatic Metric, Parameter, and Artifact Logging with mlflow.autolog]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog"/>
        <updated>2023-11-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Looking to learn more about the autologging functionality included in MLflow? Look no further than this primer on the basics of using this powerful and time-saving feature!]]></summary>
        <content type="html"><![CDATA[<p>Looking to learn more about the autologging functionality included in MLflow? Look no further than this primer on the basics of using this powerful and time-saving feature!</p>
<p>Robust logging practices are central to the iterative development and improvement of machine learning models. Carefully tracking metrics, parameters, and artifacts can be challenging when working with complex machine learning libraries or when experimenting with multiple different frameworks with varying APIs and selections of different objects and values to track.</p>
<p>MLflow’s <strong>automatic logging functionality</strong> offers a simple solution that is compatible with many widely-used machine learning libraries, such as <a href="https://mlflow.org/docs/latest/python_api/mlflow.pytorch.html" target="_blank" rel="noopener noreferrer">PyTorch</a>, <a href="https://mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.autolog" target="_blank" rel="noopener noreferrer">Scikit-learn</a>, and <a href="https://mlflow.org/docs/latest/python_api/mlflow.xgboost.html#mlflow.xgboost.autolog" target="_blank" rel="noopener noreferrer">XGBoost</a>. Using <code>mlflow.autolog()</code> instructs MLflow to capture essential data without requiring the user to specify what to capture manually. It is an accessible and powerful entrypoint for MLflow’s logging capabilities.</p>
<p>To enable automatic logging, simply add the following line to your machine learning scripts/notebooks, before initiating activities like model training or evaluation that may include information or artifacts you would like to log:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="autolog-features">Autolog features<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#autolog-features" class="hash-link" aria-label="Direct link to Autolog features" title="Direct link to Autolog features">​</a></h2>
<p>When a data science workflow includes <code>mlflow.autolog()</code>, MLflow will automatically log:</p>
<ul>
<li><strong>Metrics</strong>: standard training and evaluation measures such as accuracy and F1 score;</li>
<li><strong>Parameters</strong>: hyperparameters, such as learning rate and number of estimators; and</li>
<li><strong>Artifacts</strong>: important files, such as trained models.</li>
</ul>
<p>MLflow’s automatic logging captures details tailored to the specific activities of the library being used: different libraries will result in different logged objects and data. In addition, MLflow logs key metadata such as software versions, a git commit hash, and the file name from which the run was initiated. By documenting the system's state during model training, MLflow aims to facilitate environment reproducibility and provide audit lineage, minimizing the possibility of inference issues that could arise from package regressions or deprecations in newer library versions.</p>
<p>The specifics of what is captured through automatic logging depend on the libraries used. Additionally, MLflow captures contextual metadata such as software versions, git commit hash, and the name of the file from which the run was launched. By logging as much detail as possible about the state of the system that trained the model, MLflow can offer environment reproducibility and audit lineage, minimizing the possibility of inference issues resulting from, for example, package regressions or deprecations.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="basic-usage-of-mlflowautolog">Basic Usage of <code>mlflow.autolog</code><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#basic-usage-of-mlflowautolog" class="hash-link" aria-label="Direct link to basic-usage-of-mlflowautolog" title="Direct link to basic-usage-of-mlflowautolog">​</a></h2>
<p>You can access auto logging functionality in two different ways:</p>
<ol>
<li>Via the <code>mlflow.autolog()</code> function, which enables and configures automatic logging across all supported libraries. This provides a broad, one-size-fits-all approach when working with multiple libraries and is ideal for prototyping and exploratory analysis of a machine learning pipeline.</li>
<li>Via the library-specific autolog functions, such as <code>mlflow.sklearn.autolog()</code>, which enable finer-grained logging configuration for individual libraries. For example, <code>mlflow.pytorch.autolog()</code> includes the <code>log_every_n_epoch</code> and <code>log_every_n_step</code> arguments for specifying how often to log metrics.</li>
</ol>
<p>Regardless of which of these two approaches you use, you do not need to manually initialize an MLflow run with <a href="https://www.mlflow.org/docs/latest/python_api/mlflow.html#mlflow.start_run" target="_blank" rel="noopener noreferrer">start_run()</a> in order to have a run created and for your model, parameters, and metrics to be captured in MLflow.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example">Example<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#example" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h3>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> datasets</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">ensemble </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> RandomForestClassifier</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_selection </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> train_test_split</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Generate a 3-class classification problem</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> datasets</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">make_classification</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    n_samples</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    class_sep</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0.5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    n_classes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    n_informative</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Split the data into training and validation sets</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> X_val</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_val </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> train_test_split</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> test_size</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0.2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Enable autolog</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># or mlflow.sklearn.autolog()</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Initialize the classifier with n_estimators=200 and max_depth=10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">clf </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> RandomForestClassifier</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">n_estimators</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">200</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_depth</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Fit the classifier to the data.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># The `fit` method is patched to perform autologging. When engaged in training, a</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># run is created and the parameters are logged.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># After the fit is complete, the model artifact is logged to the run.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">clf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Score the model on the data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># The current active run is retrieved during calling `score` and the loss metrics are logged</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># to the active MLflow run.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">clf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">score</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_val</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_val</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Visualize the automatically logged run results to validate what we recorded</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">last_active_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The above logs model parameters, metrics, and the model to an MLflow run. The output result of the final statement (<a href="https://www.mlflow.org/docs/latest/python_api/mlflow.html#mlflow.last_active_run" target="_blank" rel="noopener noreferrer">mlflow.last_active_run()</a>) in the above example, which will return data from the run on model metrics, parameters, and logged artifacts (results truncated) is as shown below:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">&lt;Run: data=&lt;RunData:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">metrics={'RandomForestClassifier_score_X_val': 0.72,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_accuracy_score': 0.99625,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_f1_score': 0.9962547564333545,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_log_loss': 0.3354604497935824,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_precision_score': 0.9962921348314606,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_recall_score': 0.99625,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_roc_auc': 0.9998943433719795,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_score': 0.99625</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"> params={'bootstrap': 'True',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'ccp_alpha': '0.0',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'class_weight': 'None',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'criterion': 'gini',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'max_depth': '10',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'max_features': 'sqrt',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'max_leaf_nodes': 'None',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         [...],</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">tags={'estimator_class': 'sklearn.ensemble._forest.RandomForestClassifier',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'estimator_name': 'RandomForestClassifier',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'mlflow.autologging': 'sklearn',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      [...]</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">}, [...]&gt;&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can also access these in the mlflow ui by executing <a href="https://www.mlflow.org/docs/latest/tracking.html#tracking-ui" target="_blank" rel="noopener noreferrer">mlflow ui</a> on a command line terminal.</p>
<p><img loading="lazy" alt="The MLflow Tracking UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/autolog_in_ui-2a92179f1ef630da4f1357e3daaf5999.png" width="1687" height="1307" class="img_ev3q"></p>
<p>The MLflow UI also allows you to graphically compare different metrics and parameters across multiple runs, including those generated via <code>mlflow.autolog</code>.</p>
<p><img loading="lazy" alt="Run comparison of autologged runs in the MLflow UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/autolog_compare_runs-08773285a5af4ee8175c0ed1fc3c8c83.png" width="1685" height="1307" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configuration-and-customization">Configuration and Customization<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#configuration-and-customization" class="hash-link" aria-label="Direct link to Configuration and Customization" title="Direct link to Configuration and Customization">​</a></h2>
<p>The automatic logging functions take many arguments that give the user greater control over logging behavior. For example, <code>mlflow.autolog()</code> includes <code>log_models</code> and <code>log_datasets</code> arguments (both <code>True</code> by default) that specify whether models and dataset information should be saved to the MLflow run, enabling you to specify what is actually logged. To disable automatic logging of datasets while continuing to log all the usual elements, simply disable the autologging of datasets feature by setting <code>mlflow.autolog(log_datasets=False)</code> before fitting a model. You can also adjust the behavior of library-specific autolog functions: for example, the <code>mlflow.sklearn.autolog()</code> function includes a <code>max_tuning_runs</code> argument that specifies how many nested runs to capture when performing hyperparameter searches.</p>
<p><code>mlflow.autolog()</code> can be used in combination with the library-specific autolog functions to control the logging behavior for specific libraries. The library-specific autolog call will always supersede <code>mlflow.autolog()</code>, regardless of the order in which they are called. For example, combining <code>mlflow.autolog()</code> with <code>mlflow.sklearn.autolog(disable=True)</code> will result in automatic logging for all supported libraries except for <code>scikit-learn</code>.</p>
<p>It is important to consult the documentation for the specific framework(s) you are using in order to understand what is logged automatically and what configuration options are available. See the <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#further-reading">further reading section below</a> for links.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-and-next-steps">Conclusion and Next Steps<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#conclusion-and-next-steps" class="hash-link" aria-label="Direct link to Conclusion and Next Steps" title="Direct link to Conclusion and Next Steps">​</a></h2>
<p>MLflow's autologging capabilities and library-specific automatic logging functions provide a straightforward starting point for MLflow tracking with little or no required configuration. They log key metrics, parameters, and artifacts from many popular machine learning libraries, allowing users to track their machine learning workflows without writing custom tracking code.</p>
<p>They are not, however, the right solution for all use cases. If you only need to track a handful of specific metrics, enabling automatic logging may be inefficient, resulting in much more generated data and stored artifacts than needed. Furthermore, automatic logging is not available for every possible framework and custom values one might want to track. In such cases, it might be necessary to <a href="https://mlflow.org/docs/latest/tracking/tracking-api.html#logging-functions" target="_blank" rel="noopener noreferrer">manually specify what to track</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="further-reading">Further Reading<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#further-reading" class="hash-link" aria-label="Direct link to Further Reading" title="Direct link to Further Reading">​</a></h2>
<ul>
<li><a href="https://mlflow.org/docs/latest/tracking/autolog.html" target="_blank" rel="noopener noreferrer">MLflow Documentation on Automatic Logging</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.autolog" target="_blank" rel="noopener noreferrer">Python API reference for mlflow.autolog</a></li>
<li>Python API references for library-specific autolog functions<!-- -->
<ul>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.pytorch.html" target="_blank" rel="noopener noreferrer">PyTorch</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.tensorflow.html#mlflow.tensorflow.autolog" target="_blank" rel="noopener noreferrer">Tensorflow</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.autolog" target="_blank" rel="noopener noreferrer">Scikit-learn</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.xgboost.html#mlflow.xgboost.autolog" target="_blank" rel="noopener noreferrer">XGBoost</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.pyspark.ml.html#mlflow.pyspark.ml.autolog" target="_blank" rel="noopener noreferrer">PySpark</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.statsmodels.html#mlflow.statsmodels.autolog" target="_blank" rel="noopener noreferrer">Statsmodels</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.lightgbm.html#mlflow.lightgbm.autolog" target="_blank" rel="noopener noreferrer">LightGBM</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.paddle.html#mlflow.paddle.autolog" target="_blank" rel="noopener noreferrer">Paddle</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.fastai.html#mlflow.fastai.autolog" target="_blank" rel="noopener noreferrer">Fastai</a></li>
</ul>
</li>
</ul>]]></content>
        <author>
            <name>Daniel Liden</name>
            <uri>https://www.linkedin.com/in/danielliden</uri>
        </author>
        <category label="autolog" term="autolog"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[MLflow Docs Overhaul]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul"/>
        <updated>2023-10-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The MLflow Documentation is getting an upgrade.]]></summary>
        <content type="html"><![CDATA[<p>The MLflow Documentation is getting an upgrade.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="overhauling-the-mlflow-docs">Overhauling the MLflow Docs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#overhauling-the-mlflow-docs" class="hash-link" aria-label="Direct link to Overhauling the MLflow Docs" title="Direct link to Overhauling the MLflow Docs">​</a></h2>
<p>We're thrilled to announce a comprehensive overhaul of the MLflow Docs. This initiative is not just about refreshing the look and feel but about reimagining how our users interact with our content. Our primary goal is to enhance clarity, improve navigation, and provide more in-depth resources for our community.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-renewed-focus-on-user-experience">A Renewed Focus on User Experience<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#a-renewed-focus-on-user-experience" class="hash-link" aria-label="Direct link to A Renewed Focus on User Experience" title="Direct link to A Renewed Focus on User Experience">​</a></h2>
<p>The MLflow documentation has always been an essential resource for our users. Over time, we've received invaluable feedback, and we've listened. The modernization effort is a direct response to the needs and preferences of our community.</p>
<p>Along with working on covering new cutting-edge features as part of this documentation overhaul, we're working on addressing the complexity of getting started. As the first part of a series of tutorials and guides focusing on the initial learning phase, we've created a new <a href="https://www.mlflow.org/docs/latest/getting-started/logging-first-model/index.html" target="_blank" rel="noopener noreferrer">getting started guide</a>, the first of many in a new series we're working on in an effort to teach the fundamentals of using MLflow. We feel that more in-depth instructional tutorials for learning the concepts and tools of MLflow will help to enhance the user experience for not only new users, but experienced users who need a refresher of how to do certain tasks.</p>
<p>There are more of these coming in the future!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="easier-navigation"><strong>Easier Navigation</strong><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#easier-navigation" class="hash-link" aria-label="Direct link to easier-navigation" title="Direct link to easier-navigation">​</a></h3>
<p>Our first order of business is to declutter and reorganize. This is going to be a process, though. With some of the monolithic pages (<a href="https://www.mlflow.org/docs/2.7.1/models.html" target="_blank" rel="noopener noreferrer">Mlflow Models</a>), this will be more of a marathon than a sprint.</p>
<p>We've introduced a <a href="https://www.mlflow.org/docs/latest/index.html" target="_blank" rel="noopener noreferrer">new main navigation page</a> in an effort to help steer you to the content that you're looking for based on end-use domain, rather than component of MLflow. We're hoping that this helps to bring new feature content and useful examples to your awareness, limiting the amount of exploratory discovery needed to understand how to use these new features.</p>
<p>Another priority for us was to make major new features easier to discover. While the <a href="https://github.com/mlflow/mlflow/blob/master/CHANGELOG.md" target="_blank" rel="noopener noreferrer">release notes</a> are useful, particularly for Engineers who are maintaining integrations with, or are managing a deployment of, MLflow, they're not particularly user-friendly for an end-user of MLflow. We felt that a curated list of major new features would help to distill the information in our release notes, so we built the <a href="https://www.mlflow.org/docs/latest/new-features/index.html" target="_blank" rel="noopener noreferrer">new features</a> page. We sincerely hope it helps to reduce the amount of effort needed to know what new major features have been released.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="interactive-learning-with-notebooks"><strong>Interactive Learning with Notebooks</strong><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#interactive-learning-with-notebooks" class="hash-link" aria-label="Direct link to interactive-learning-with-notebooks" title="Direct link to interactive-learning-with-notebooks">​</a></h3>
<p>In today's fast-paced tech world, interactive learning is becoming the norm. Recognizing this trend, we're embedding viewable notebooks directly within the docs. But we're not stopping there. These notebooks are downloadable, allowing you to run, modify, and experiment with them locally. It's a hands-on approach to learning, bridging the gap between theory and practice.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="in-depth-tutorials-and-guides"><strong>In-depth Tutorials and Guides</strong><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#in-depth-tutorials-and-guides" class="hash-link" aria-label="Direct link to in-depth-tutorials-and-guides" title="Direct link to in-depth-tutorials-and-guides">​</a></h3>
<p>While our previous documentation provided a solid foundation, we felt there was room for more detailed explorations. We're introducing comprehensive <a href="https://www.mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/index.html" target="_blank" rel="noopener noreferrer">tutorials</a> and <a href="https://www.mlflow.org/docs/latest/llms/llm-evaluate/index.html" target="_blank" rel="noopener noreferrer">guides</a> that delve deep into MLflow's features, showing how to solve actual problems. These first new tutorials and guides are just the start. We're going to be spending a lot of time and effort on making much more of MLflow documented in this way, helping to dramatically reduce the amount of time you have to spend figuring out how to leverage features in MLflow.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="diving-deeper-expanding-on-guides-and-tutorials">Diving Deeper: Expanding on Guides and Tutorials<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#diving-deeper-expanding-on-guides-and-tutorials" class="hash-link" aria-label="Direct link to Diving Deeper: Expanding on Guides and Tutorials" title="Direct link to Diving Deeper: Expanding on Guides and Tutorials">​</a></h2>
<p>Our dedication to simplifying the usage of MLflow shines through in our revamped tutorials and guides. We're not just providing instructions; we're offering <a href="https://www.mlflow.org/docs/latest/llms/custom-pyfunc-for-llms/notebooks/index.html" target="_blank" rel="noopener noreferrer">deep dives</a>, <a href="https://www.mlflow.org/docs/latest/traditional-ml/hyperparameter-tuning-with-child-runs/index.html" target="_blank" rel="noopener noreferrer">best practices</a>, and real-world applications. What you see in the MLflow 2.8.0 release is just the beginning. We're going to be heavily focusing on creating more content, showing the best way to leverage the many features and services within MLflow, all the while endeavoring to make it easier than ever to manage any ML project you're working on.</p>
<ul>
<li>
<p><strong>LLMs</strong>: With all of the <a href="https://www.mlflow.org/docs/latest/llms/llm-evaluate/notebooks/rag-evaluation.html" target="_blank" rel="noopener noreferrer">new LLM-focused features</a> we've been releasing in the past year, we feel the need to create easier getting started guides,
<a href="https://www.mlflow.org/docs/latest/llms/llm-evaluate/notebooks/question-answering-evaluation.html" target="_blank" rel="noopener noreferrer">in-depth tutorials</a>, runnable examples, and more teaching-oriented step-by-step introductions to these features.</p>
</li>
<li>
<p><strong>Tracking and the MLflow UI</strong>: Our expanded section on tracking will cover everything from setting up your first experiment to advanced tracking techniques. The MLflow UI, an integral part of the platform, will also get its spotlight, ensuring you can make the most of its features.</p>
</li>
<li>
<p><strong>Model Registry</strong>: The model registry is where MLflow truly shines, and our new guides will ensure you can harness its full power. From organizing models to version control, we'll cover it all.</p>
</li>
<li>
<p><strong>Recipes and LLM-focused Features</strong>: MLflow's versatility is one of its strengths. Our new content will explore the breadth of features available, from recipes to LLM-focused tools like the AI Gateway, LLM Evaluation, and the PromptLab UI.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-transformative-power-of-interactive-notebooks">The Transformative Power of Interactive Notebooks<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#the-transformative-power-of-interactive-notebooks" class="hash-link" aria-label="Direct link to The Transformative Power of Interactive Notebooks" title="Direct link to The Transformative Power of Interactive Notebooks">​</a></h2>
<p>Interactive notebooks have revolutionized data science and machine learning. By integrating them into our documentation, we aim to provide a holistic learning experience. You can see code in action, understand its impact, and then experiment on their own. It's a dynamic way to grasp complex concepts, ensuring that you not only understand but can also apply your knowledge in your actual project code.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="join-us-on-this-journey">Join Us on This Journey<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#join-us-on-this-journey" class="hash-link" aria-label="Direct link to Join Us on This Journey" title="Direct link to Join Us on This Journey">​</a></h2>
<p>The overhaul of the MLflow documentation is a significant milestone, but it's just the beginning. We have a roadmap full of exciting updates, new content, and features. And for those in our community with a passion for sharing knowledge, we have a message: We'd love to <a href="https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">collaborate</a>! Whether it's writing tutorials, sharing use-cases, or providing feedback, every contribution enriches the MLflow community.</p>
<p>In conclusion, our commitment to providing top-notch documentation is a new primary focus of the maintainer group. We believe that well-documented features, combined with interactive learning tools, can significantly enhance the experience of using any tool. We want to put in the effort and time to make sure that your journey with using MLflow is as simple and powerful as it can be.</p>
<p>Stay tuned for more updates, and as always, happy coding!</p>]]></content>
        <author>
            <name>MLflow maintainers</name>
            <uri>https://github.com/mlflow/mlflow.git</uri>
        </author>
        <category label="docs" term="docs"/>
    </entry>
</feed>